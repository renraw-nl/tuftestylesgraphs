[build-system]
requires = ["poetry-core>=1.3.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"


[tool.poetry]
name = "tuftestyledgraphs"
version = "0.1.0"
description = "Matplotlib graphs using styles inspired by Tufte's principles in 'The Visual Display of Quantitative Information'"
authors = ["Warner Leijenaar <git@renraw.nl>"]
readme = "README.md"
packages = [
    { include = "tuftestyledgraphs", from = "src" },
    # {include = "tuftestyledgraphs/py.typed", from = "src"},
]
include = [{ path = "var/rc/*", format = "sdist" }]


[tool.poetry.urls]
"Homepage" = "https://github.com/renraw-nl/tuftestyledgraphs"


[tool.poetry.dependencies]
python = ">=3.11,<4.0"
matplotlib = "^3.0"


[tool.poetry.group.dev.dependencies]
ruff = "^0.1"
pre-commit = "^3.0"
interrogate = "^1.0"


[tool.poetry.group.test.dependencies]
hypothesis = "^6.96"
pytest = "^7.4"
pytest-mock = "^3.12"


[tool.poetry.group.jupiter.dependencies]
jupyterlab = "^4.0"
pandas = "*"
watermark = "^2.0"
pyarrow = "^15.0"


[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"


## TESTING CONFIGURATION
[tool.pytest.ini_options]
# asyncio_mode = "auto"
# addopts = "--no-cov-on-fail --showlocals --strict-markers"
addopts = "--showlocals --strict-markers"
testpaths = ["tests"]
norecursedirs = "_build var* .*cache .vscode .venv"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "utils",
]


## INTERROGATE CONFIGURATION
[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = true
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 80
exclude = ["docs", "notes", "build", ".venv", "var", ".*_cache"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 0
quiet = false
whitelist-regex = []
color = true
# generate-badge = "."
# badge-format = "svg"


## LINTER and FORMATTER CONFIGURATION
# Ruff linter, replaces isort, black, mccabe, etc.
[tool.ruff]
line-length = 88
indent-width = 4
target-version = "py312"

# include notebook files
extend-include = ["*.ipynb"]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "__pycache__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
ignore = []
select = [
    "E",      # pydocstyle errors
    "F",      # pydocstyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "FURB",   # refurb"
    "NPY201", # numpy-specific rules
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "I",
    "N",
    "Q",
    "S",
    "T",
    "W",
    "ANN",
    "ARG",
    "BLE",
    "COM",
    "DJ",
    "DTZ",
    "EM",
    "ERA",
    "EXE",
    "FBT",
    "ICN",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "SLF",
    "TCH",
    "TID",
    "TRY",
    "UP",
    "YTT",
]
unfixable = []

# Unlike Flake8, default to a complexity level of 10.
# mccabe.max-complexity = 10

[tool.ruff.lint.isort]
lines-between-types = 1
lines-after-imports = 2

[tool.ruff.format]
# Enable auto-formatting of code examples in docstrings.
docstring-code-format = true
docstring-code-line-length = 88

# Like Black, use double quotes for strings.
quote-style = "single"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"


## PYMARKDOWNLNT CONFIGURATION
# pymarkdownlnt configuration (yes both are correct)
# ref. https://github.com/jackdewinter/pymarkdown/blob/main/docs/advanced_configuration.md#alternate-project-configuration-files
[tool.pymarkdown.log]
level = "ERROR"
stack-trace = true

[tool.pymarkdown.extensions]
markdown-disallow-raw-html = { enabled = true }
front-matter = { enabled = true }
# markdown-task-list-items = {enabled = true}

[tool.pymarkdown.plugins]
# Enabled rules, with some configuration
emphasis-style = { enabled = true, style = "underscore" }
heading-style = { enabled = true, style = "atx" }
no-hard-tabs = { enabled = true }
# ul-indent = {enabled = true, indent = 4}

# disabled rules
blanks-around-fences = { enabled = false }
blanks-around-lists = { enabled = false }
code-block-style = { enabled = false }
fenced-code-language = { enabled = false }
line-length = { enabled = false }
no-blanks-blockquote = { enabled = false }
no-duplicate-heading = { enabled = false }
ol-prefix = { enabled = false }
single-h1 = { enabled = false }


## CODESPELL CONFIGURATION
# https://github.com/codespell-project/codespell
# https://github.com/codespell-project/codespell?tab=readme-ov-file#inline-ignore
[tool.codespell]
skip = '*.po,*.ts,*.html'
count = true
quiet-level = 3


## PYRIGHT CONFIGURATION
# Pyright language server configuration for [Zed editor](https://zed.dev/)
[tool.pyright]
venvPath = "."
venv = ".venv"
